name: Test Command

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write

jobs:
  check-command:
    if: |
      github.event.issue.pull_request && 
      contains(github.event.comment.body, '/test all') &&
      (github.event.comment.author_association == 'MEMBER' || 
       github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'COLLABORATOR')
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.get-pr.outputs.pr_number }}
    steps:
      - name: Get PR number
        id: get-pr
        run: |
          echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
      
      - name: React to comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Starting full test suite... :hourglass_flowing_sand:`
            });

  run-tests:
    needs: check-command
    runs-on: ubuntu-latest
    container:
      image: peach10.devcore4.com/category-labs/builder
      options: --privileged
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.REPO_READONLY_GITHUB_APP_ID }}
          private_key: ${{ secrets.REPO_READONLY_GITHUB_APP_KEY }}
          permissions: >-
            {"contents": "read"}

      - name: Get PR info
        id: pr-info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.check-command.outputs.pr_number }}
            });
            core.setOutput('ref', pr.data.head.sha);
            core.setOutput('repo', pr.data.head.repo.full_name);

      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-info.outputs.ref }}
          submodules: recursive
          token: ${{ steps.generate_token.outputs.token }}

      - run: rustup toolchain install nightly-2024-12-10 --profile minimal --component rustfmt
      - run: rustup toolchain install 1.85.0-x86_64-unknown-linux-gnu --profile minimal --component clippy

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main
      
      - name: Install cargo-shear
        run: cargo binstall --no-confirm cargo-shear

      - name: Run full test suite
        id: tests
        run: |
          echo "Running full test suite for PR #${{ needs.check-command.outputs.pr_number }}"
          
          cargo update --workspace --locked
          cargo shear
          cargo +nightly-2024-12-10 fmt --all --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo check --all-targets --all-features
          cargo test --release --all-targets --all-features
          cargo doc -p monad-event-ring -p monad-exec-events
          cargo test --release --doc --all-features
          
          rustup target add wasm32-unknown-unknown
          cargo check --target wasm32-unknown-unknown -p monad-debugger

      - name: Update commit status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const state = status === 'success' ? 'success' : 'failure';
            
            // Get PR info
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.check-command.outputs.pr_number }}
            });
            
            // Update the commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: pr.data.head.sha,
              state: state,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: state === 'success' ? 'Tests passed via /test all' : 'Tests failed',
              context: 'Tests / Manual Review Required'
            });

      - name: Post results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const emoji = status === 'success' ? '✅' : '❌';
            const prNumber = ${{ needs.check-command.outputs.pr_number }};
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `${emoji} Full test suite completed: **${status}**
              
              [View detailed results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              Triggered by: @${{ github.event.comment.user.login }}
              Commit tested: \`${{ steps.pr-info.outputs.ref }}\``
            });
